import { PostgresExplorer } from "@ts-schema-generator/explorer";
import {
  Configuration,
  Plugin,
  PluginResults,
  Schema,
  Table,
  View
} from "@ts-schema-generator/types";
import { writeFileSync } from "fs";
import { join } from "path";
import { format } from "prettier";

export async function main(): Promise<void> {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const config: Configuration = require(join(process.cwd(), "tsg.config.js"));

  const uri = config.uri || process.env.DATABASE_URI;
  if (!uri) throw new Error(`DATABASE_URI is required`);
  const explorer = new PostgresExplorer(uri);

  const definitions = await Promise.all([
    explorer.getTableDefinitions("public" as Schema, ["country", "attribute"] as Table[]),
    explorer.getViewDefinitions("public" as Schema, ["permission", "review"] as View[])
  ]);

  const resultsByFilepath: Record<string, PluginResults[]> = {};

  for (const plugin of config.plugins) {
    const fn: Plugin = await import(`@ts-schema-generator/${plugin.name}`).then(m => m.default);
    const result = await fn(explorer, definitions.flat(), config);
    if (!resultsByFilepath[plugin.filepath]) resultsByFilepath[plugin.filepath] = [];
    resultsByFilepath[plugin.filepath].push(result);
  }

  Object.entries(resultsByFilepath).map(([filepath, results]) => {
    const metadata = `
    /**
     * AUTO-GENERATED BY ts-schema-generator - DO NOT EDIT!
     * 
     * ${new Date().toISOString()}
     */
    `;

    const headers: string[] = [`/* eslint-disable */`];
    const outputs: string[] = [];

    for (const result of results) {
      if (result.headers) headers.push(...result.headers);
      outputs.push(...result.outputs);
    }

    writeFileSync(
      join(filepath),
      format(
        `${metadata}

         ${headers.join("\n")}

         ${outputs.join("\n\n")}`,
        { parser: "typescript", tabWidth: 2, printWidth: 100 }
      )
    );

    console.log(`File saved to ${filepath}`);
  });

  await explorer.close();
}

main();
