import { PostgresExplorer } from "@ts-schema-generator/explorer";
import { Configuration, Plugin, PluginResults } from "@ts-schema-generator/types";
import { writeFileSync } from "fs";
import { join } from "path";
import { format } from "prettier";
import { createPool } from "slonik";
import { createInterceptors } from "slonik-interceptor-preset";

export async function main(): Promise<void> {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const config: Configuration = require(join(process.cwd(), "tsg.config.js"));

  const uri = config.uri || process.env.DATABASE_URI;
  if (!uri) throw new Error(`DATABASE_URI is required`);

  const pool = createPool(uri, { interceptors: [...createInterceptors()] });

  const explorer = new PostgresExplorer(pool);

  const [tables, views] = await Promise.all([
    explorer.getTableDefinitions(),
    explorer.getViewDefinitions()
  ]);

  const resultsByFilename: Record<string, PluginResults[]> = {};

  for (const plugin of config.plugins) {
    const fn: Plugin = await import(`@ts-schema-generator/${plugin.name}`).then(m => m.default);
    const result = await fn(explorer, [...tables, ...views], config);
    if (!resultsByFilename[plugin.filepath]) resultsByFilename[plugin.filepath] = [];
    resultsByFilename[plugin.filepath].push(result);
  }

  Object.entries(resultsByFilename).map(([filename, results]) => {
    const metadata = `
    /**
     * AUTO-GENERATED BY ts-schema-generator - DO NOT EDIT!
     * 
     * ${new Date().toISOString()}
     */
    `;

    const headers: string[] = [`/* eslint-disable */`];
    const outputs: string[] = [];

    for (const result of results) {
      if (result.headers) headers.push(...result.headers);
      outputs.push(...result.outputs);
    }

    writeFileSync(
      join(filename),
      format(
        `
          ${metadata}
    
          ${headers.join("\n")}
           
          ${outputs.join("\n\n")}
          `,
        { parser: "typescript", tabWidth: 2, printWidth: 100 }
      )
    );

    console.log(`File saved to ${filename}`);
  });

  await pool.end();
}

main();
